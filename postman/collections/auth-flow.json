{
  "info": {
    "name": "Game-On Auth Flow",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Clear any existing session",
          "pm.variables.set('idToken', '');",
          "pm.variables.set('sessionCookie', '');",
          "pm.variables.set('tokenExpiry', '');"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "1. Player Authentication",
      "item": [
        {
          "name": "1.1 Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.variables.set('idToken', jsonData.idToken);",
                  "    pm.variables.set('uid', jsonData.user.uid);",
                  "}",
                  "",
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has Firebase token', function() {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.idToken).to.exist;",
                  "    pm.expect(jsonData.user).to.exist;",
                  "});",
                  "",
                  "pm.test('User has player role', function() {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.roles).to.include('player');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testUserEmail}}\",\n    \"password\": \"{{testUserPassword}}\"\n}"
            },
            "url": "{{baseUrl}}/api/auth/login"
          }
        },
        {
          "name": "1.2 Create Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const cookie = pm.response.headers.find(h => h.key.toLowerCase() === 'set-cookie');",
                  "    if (cookie) {",
                  "        const sessionCookie = cookie.value.split(';')[0].split('=')[1];",
                  "        pm.variables.set('sessionCookie', sessionCookie);",
                  "        pm.variables.set('tokenExpiry', new Date(Date.now() + 3600000).toISOString());",
                  "    }",
                  "}",
                  "",
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Session cookie is set', function() {",
                  "    const cookie = pm.response.headers.find(h => h.key.toLowerCase() === 'set-cookie');",
                  "    pm.expect(cookie).to.exist;",
                  "    pm.expect(cookie.value).to.include('session=');",
                  "});",
                  "",
                  "pm.test('Response has user data', function() {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('success');",
                  "    pm.expect(jsonData.user).to.exist;",
                  "    pm.expect(jsonData.user.uid).to.equal(pm.variables.get('uid'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"idToken\": \"{{idToken}}\"\n}"
            },
            "url": "{{baseUrl}}/api/auth/session"
          }
        },
        {
          "name": "1.3 Verify Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Session is valid', function() {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.valid).to.be.true;",
                  "    pm.expect(jsonData.user).to.exist;",
                  "    pm.expect(jsonData.user.uid).to.equal(pm.variables.get('uid'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sessionCookie\": \"{{sessionCookie}}\"\n}"
            },
            "url": "{{baseUrl}}/api/auth/verify"
          }
        }
      ]
    },
    {
      "name": "2. Error Cases",
      "item": [
        {
          "name": "2.1 Invalid Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function() {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message exists', function() {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"wrong@example.com\",\n    \"password\": \"wrongpass\"\n}"
            },
            "url": "{{baseUrl}}/api/auth/login"
          }
        },
        {
          "name": "2.2 Invalid Session Creation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function() {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message exists', function() {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"idToken\": \"invalid-token\"\n}"
            },
            "url": "{{baseUrl}}/api/auth/session"
          }
        },
        {
          "name": "2.3 Invalid Session Verification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function() {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Session is invalid', function() {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.valid).to.be.false;",
                  "    pm.expect(jsonData.error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"sessionCookie\": \"invalid-session-cookie\"\n}"
            },
            "url": "{{baseUrl}}/api/auth/verify"
          }
        }
      ]
    },
    {
      "name": "3. Session Management",
      "item": [
        {
          "name": "3.1 Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Session cookie is cleared', function() {",
                  "    const cookie = pm.response.headers.find(h => h.key.toLowerCase() === 'set-cookie');",
                  "    pm.expect(cookie).to.exist;",
                  "    pm.expect(cookie.value).to.include('session=;');",
                  "});",
                  "",
                  "// Clear variables",
                  "pm.variables.set('sessionCookie', '');",
                  "pm.variables.set('tokenExpiry', '');"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Cookie",
                "value": "session={{sessionCookie}}"
              }
            ],
            "url": "{{baseUrl}}/api/auth/session"
          }
        }
      ]
    }
  ]
} 